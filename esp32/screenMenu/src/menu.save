#include <Arduino.h> // Core

#include "esp_camera.h" // Cam

#include <TFT_eSPI.h> // Graphics and font library for ILI9341 driver chip

#include <stdexcept>
#include <string.h>
#include <array>
#include <string>
#include <vector>

// Define index for cam options
#define CAM_OPTION_BRIGHTNESS  0
#define CAM_OPTION_CONTRAST  1
#define CAM_OPTION_SATURATION  2
#define CAM_OPTION_SPECIAL_EFFECT  3
#define CAM_OPTION_WHITEBAL  4
#define CAM_OPTION_AWB_GAIN  5
#define CAM_OPTION_WB_MODE  6
#define CAM_OPTION_EXPOSURE_CTRL  7
#define CAM_OPTION_AEC2  8
#define CAM_OPTION_AE_LEVEL  9
#define CAM_OPTION_AEC_VALUE  10
#define CAM_OPTION_GAIN_CTRL  11
#define CAM_OPTION_AGC_GAIN  12
#define CAM_OPTION_GAINCEILING  13
#define CAM_OPTION_BPC  14
#define CAM_OPTION_WPC  15
#define CAM_OPTION_RAW_GMA  16
#define CAM_OPTION_LENC  17
#define CAM_OPTION_HMIRROR  18
#define CAM_OPTION_VFLIP  19
#define CAM_OPTION_DCW  20
#define CAM_OPTION_COLORBAR  21

std::string optionToString(int option) {
    switch (option) {
        case CAM_OPTION_BRIGHTNESS :
            return "brightness";
        case CAM_OPTION_CONTRAST :
                return "contrast";
        case CAM_OPTION_SATURATION :
                return "saturation";
        case CAM_OPTION_SPECIAL_EFFECT :
                return "special effect";
        case CAM_OPTION_WHITEBAL :
                return "white balance";
        case CAM_OPTION_AWB_GAIN :
                return "awb gain";
        case CAM_OPTION_WB_MODE :
                return "wb_mode";
        case CAM_OPTION_EXPOSURE_CTRL :
                return "exposure_ctrl";
        case CAM_OPTION_AEC2 :
                return "aec2";
        case CAM_OPTION_AE_LEVEL :
                return "ae_level";
        case CAM_OPTION_AEC_VALUE :
                return "aec_value";
        case CAM_OPTION_GAIN_CTRL :
                return "gain_ctrl";
        case CAM_OPTION_AGC_GAIN :
                return "agc_gain";
        case CAM_OPTION_GAINCEILING :
                return "gainceiling";
        case CAM_OPTION_BPC :
                return "bpc";
        case CAM_OPTION_WPC :
                return "wpc";
        case CAM_OPTION_RAW_GMA :
                return "raw_gma";
        case CAM_OPTION_LENC :
                return "lenc";
        case CAM_OPTION_HMIRROR :
                return "hmirror";
        case CAM_OPTION_VFLIP :
                return "vflip";
        case CAM_OPTION_DCW :
                return "dcw";
        case CAM_OPTION_COLORBAR :
                return "colorbar";
        default:
           throw std::runtime_error("Error sensor setting undefined");
            break;
    }
}

const std::array<std::vector<std::pair<std::string, int>>, 22> availableValuesByOptions {{ 
    {{"-2", -2}, {"-1", -1}, {"0", 0}, {"1", 1}, {"2", 2}}, // brightness (-2 to 2)
    {{"-2", -2}, {"-1", -1}, {"0", 0}, {"1", 1}, {"2", 2}}, // contrast (-2 to 2)
    {{"-2", -2}, {"-1", -1}, {"0", 0}, {"1", 1}, {"2", 2}}, // saturation (-2 to 2)
    {{"No Effect", 0}, {"Negative", 1}, {"Grayscale", 2}, {"Red Tint", 3}, {"Green Tint", 4}, {"Blue Tint", 5}, {"Sepia", 6}}, // special_effect (0 - No Effect, 1 - Negative, 2 - Grayscale, 3 - Red Tint, 4 - Green Tint, 5 - Blue Tint, 6 - Sepia)
    {{"disable", 0}, {"enable", 1}}, // whitebal (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // awb_gain // 0 = disable , 1 = enable)
    {{"Auto", 0}, {"Sunny", 1}, {"Cloudy", 2}, {"Office", 3}, {"Home", 4}}, // wb_mod if awb_gain enabled (0 - Auto, 1 - Sunny, 2 - Cloudy, 3 - Office, 4 - Home)
    {{"disable", 0}, {"enable", 1}}, // exposure_ctrl (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // aec2 (0 = disable , 1 = enable)
    {{"-2", -2}, {"-1", -1}, {"0", 0}, {"1", 1}, {"2", 2}}, // ae_level (-2 to 2)
    {{"0", 0}, {"100", 100}, {"200", 200}, {"300", 300}, {"400", 400}, {"500", 500}, {"600", 600}, {"700", 700}, {"800", 800}, {"900", 900}, {"1000", 1000}, {"1100", 1100}, {"1200", 1200}}, // aec_value (0 to 1200)
    {{"disable", 0}, {"enable", 1}}, // gain_ctrl (0 = disable , 1 = enable)
    {{"0", 0}, {"3", 3}, {"6", 6}, {"9", 9}, {"12", 12}, {"15", 15}, {"18", 18}, {"21", 21}, {"24", 24}, {"27", 27}, {"30", 30}}, // agc_gain (0 to 30)
    {{"x2", 0}, {"x4", 1}, {"x8", 2}, {"x16", 3}, {"x32", 4}, {"x64", 5}, {"x128", 6}}, // gainceiling (0 - x2, 1 - x4, 2 - x8, 3 - x16, 4 - x32, 5 - x64, 6 - x128)
    {{"disable", 0}, {"enable", 1}}, // bpc (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // wpc (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // raw_gma (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // lenc (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // hmirror (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // vflip (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}}, // dcw (0 = disable , 1 = enable)
    {{"disable", 0}, {"enable", 1}} // colorbar (0 = disable , 1 = enable)
}};

std::array<int, 22> optionsValues {{ 
    0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 300, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0
}};

void setOption(sensor_t* s, int option, int value) {
    switch (option) {
        case CAM_OPTION_BRIGHTNESS:
            s->set_brightness(s, value);
            break;
        case CAM_OPTION_CONTRAST:
            s->set_contrast(s, value);
            break;
        case CAM_OPTION_SATURATION:
            s->set_saturation(s, value);
            break;
        case CAM_OPTION_SPECIAL_EFFECT:
            s->set_special_effect(s, value);
            break;
        case CAM_OPTION_WHITEBAL:
            s->set_whitebal(s, value);
            break;
        case CAM_OPTION_AWB_GAIN:
            s->set_awb_gain(s, value);
            break;
        case CAM_OPTION_WB_MODE:
            s->set_wb_mode(s, value);
            break;
        case CAM_OPTION_EXPOSURE_CTRL:
            s->set_exposure_ctrl(s, value);
            break;
        case CAM_OPTION_AEC2:
            s->set_aec2(s, value);
            break;
        case CAM_OPTION_AE_LEVEL:
            s->set_ae_level(s, value);
            break;
        case CAM_OPTION_AEC_VALUE:
            s->set_aec_value(s, value);
            break;
        case CAM_OPTION_GAIN_CTRL:
            s->set_gain_ctrl(s, value);
            break;
        case CAM_OPTION_AGC_GAIN:
            s->set_agc_gain(s, value);
            break;
        case CAM_OPTION_GAINCEILING:
            s->set_gainceiling(s, gainceiling_t(value));
            break;
        case CAM_OPTION_BPC:
            s->set_bpc(s, value);
            break;
        case CAM_OPTION_WPC:
            s->set_wpc(s, value);
            break;
        case CAM_OPTION_RAW_GMA:
            s->set_raw_gma(s, value);
            break;
        case CAM_OPTION_LENC:
            s->set_lenc(s, value);
            break;
        case CAM_OPTION_HMIRROR:
            s->set_hmirror(s, value);
            break;
        case CAM_OPTION_VFLIP:
            s->set_vflip(s, value);
            break;
        case CAM_OPTION_DCW:
            s->set_dcw(s, value);
            break;
        case CAM_OPTION_COLORBAR:
            s->set_colorbar(s, value);
            break;
        default:
           throw std::runtime_error("Error sensor setting undefined");
            break;
    }
}

std::string optionValueToString(int option, int value) {
    const std::vector<std::pair<std::string, int>> availableValues = availableValuesByOptions[option];
    const auto end = availableValues.end();
    const auto it = std::find_if(availableValues.begin(), end, [&value](const std::pair<std::string, int>& v) 
    { return v.second == value; } );
    
    if(it == end)
        throw std::runtime_error("[error] value for this option can't be found");

    return it->first;
}
uint16_t colorConverter(uint8_t r, uint8_t g, uint8_t b) {
    // R, G, and B are divided equally giving 3 * 5 = 15 bits and the additional bit is allocated to Green.
    return static_cast<uint16_t>(r >> 3) << 11 | static_cast<uint16_t>(g >> 2) << 5 | static_cast<uint16_t>(b >> 3);
}

template <typename T> int sgn(T val) {
    return (T(0) < val) - (val < T(0));
}


const int buttonPin = 0;
int buttonsValue;

// Pause in milliseconds between screens, change to 0 to time font rendering
#define WAIT 2500

TFT_eSPI tft = TFT_eSPI();  // Invoke library, pins defined in User_Setup.h

// 240*320
int selectedOption = 0;

unsigned long targetTime = 0; // Used for testing draw times

void setup(void) {
  tft.init();
  tft.setRotation(1);
  tft.setTextDatum(CC_DATUM);
}

void loop() {
    targetTime = millis();

    ++selectedOption;
    selectedOption %= availableValuesByOptions.size();

    tft.fillScreen(TFT_WHITE);

    tft.setTextPadding(1);
    tft.setTextSize(1);

    const int lineHeight = tft.fontHeight(4);
    const int centerHeight = 120;
    const int padding = 4;
    
    // use array and https://en.cppreference.com/w/cpp/algorithm/rotate to accelerate the result
    for (int i = -4; i < 4; ++i) {
        const bool isNotCenter = i != 0;
        const uint8_t greyLevel = 52*abs(i) + 32 * isNotCenter;
        const uint16_t color = colorConverter(greyLevel, greyLevel, greyLevel);
        tft.setTextColor(color, TFT_WHITE);
        const int id = (availableValuesByOptions.size() + selectedOption + i) % availableValuesByOptions.size();
        const int yPos = centerHeight + i * (lineHeight + padding) + isNotCenter * sgn(i) * padding;
        tft.drawString(optionToString(id).c_str(), 90, yPos, 4);
        tft.drawString(optionValueToString(id, optionsValues[id]).c_str(), 240, yPos, 4);
    }
    tft.drawLine(10, centerHeight + (lineHeight + padding)/2 , 310, centerHeight + (lineHeight + padding)/2 , TFT_DARKGREY);
    tft.drawLine(10, centerHeight - lineHeight/2 - padding , 310, centerHeight - lineHeight/2 - padding , TFT_DARKGREY);

    tft.setTextColor(TFT_BLUE, TFT_WHITE);
    buttonsValue = analogRead(buttonPin);
    tft.drawNumber(buttonsValue, padding, lineHeight, 4);
    delay(WAIT);
}